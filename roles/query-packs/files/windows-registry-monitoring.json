{
  "platform": "windows",
  "queries": {
    "amsi_disabled_registry": {
      "query": "SELECT key, r.path, r.name, r.mtime, r.data, username from registry r, users WHERE path = \u0027HKEY_USERS\\\u0027||uuid||\u0027\\Software\\Microsoft\\Windows Script\\Settings\\AmsiEnable\u0027 AND data=0;",
      "interval": 3600,
      "description": "A registry key can be created to disable AMSI on Windows: (https://twitter.com/Moriarty_Meng/status/1011568060883333120)",
      "platform": "windows"
    },
    "bitlocker_encryption_settings_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE (path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\ShouldEncryptOSDrive\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\OSDriveProtector\u0027) AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "bitlocker_mbam_endpoint_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\KeyRecoveryServiceEndPoint\u0027 AND data!=\u0027https://mbam.server.com/MBAMRecoveryAndHardwareService/CoreService.svc\u0027;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "bitlocker_mbam_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\UseMBAMServices\u0027 AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "command_line_auditing_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\\ProcessCreationIncludeCmdLine_Enabled\u0027 AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "command_line_auditing_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\\ProcessCreationIncludeCmdLine_Enabled\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "computer_maximum_password_age_changed_registry": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters\\MaximumPasswordAge\u0027 and data!=30;",
      "interval": 3600,
      "description": "Controls how often to rotate the local computer password (defaults to 30 days). A modification of this value may be an indicator of attacker activity.",
      "platform": "windows"
    },
    "computer_password_change_disabled_registry": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Netlogon\\Parameters\\DisablePasswordChange\u0027 AND data!=0;",
      "interval": 3600,
      "description": "Technique used by attackers to prevent computer accounts from changing their password, thus extending the life of Kerberos silver tickets (https://adsecurity.org/?p=2011)",
      "platform": "windows"
    },
    "crash_dump_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\CrashDumpEnabled\u0027 AND data=0;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "crash_dump_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\CrashDumpEnabled\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "dns_plugin_dll_registry_exists": {
      "query": "SELECT * FROM registry WHERE key=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\DNS\\Parameters\\ServerLevelPluginDll\u0027;",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn\u0027t by default",
      "platform": "windows"
    },
    "dr_watson_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry where key=\u0027HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\u0027) WHERE key_exists!=2;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "error_display_ui_registry_exists": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Microsoft\\PCHealth\\ErrorReporting\\ShowUI\u0027;",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn\u0027t by default",
      "platform": "windows"
    },
    "error_mode_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Windows\\ErrorMode\u0027 AND data=2;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "error_mode_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Windows\\ErrorMode\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "log_errors_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\LogEvent\u0027 AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "log_errors_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\LogEvent\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "per_user_ts_session_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\fSingleSessionPerUser\u0027 AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "per_user_ts_session_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\fSingleSessionPerUser\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "physicalstore_dll_registry_persistence": {
      "query": "SELECT key, path, name, mtime, username FROM registry r, users WHERE path LIKE \u0027HKEY_USERS\\\u0027||uuid||\u0027\\Software\\Microsoft\\SystemCertificates\\CA\\PhysicalStores\\%%\u0027 OR path LIKE \u0027HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllOpenStoreProv\\%%\u0027 AND name!=\u0027#16\u0027 AND name!=\u0027Ldap\u0027;",
      "interval": 3600,
      "description": "Detect a registry based persistence mechanism that allows an attacker to specify a DLL to be loaded when cryptographic libraries are called (https://twitter.com/PsiDragon/status/978367732793135105)",
      "platform": "windows"
    },
    "powershell_invocationheader_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableInvocationHeader\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "powershell_logging_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE (path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ModuleLogging\\EnableModuleLogging\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ScriptBlockLogging\\EnableScriptBlockLogging\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableTranscripting\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableInvocationHeader\u0027) AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "powershell_module_logging_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ModuleLogging\\EnableModuleLogging\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "powershell_scriptblock_logging_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ScriptBlockLogging\\EnableScriptBlockLogging\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "powershell_transcription_logging_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableTranscripting\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "runonceex_persistence_registry": {
      "query": "SELECT * FROM registry WHERE path = \u0027HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\u0027;",
      "interval": 3600,
      "description": "Registry based persistence mechanism to load DLLs at reboot time and avoids detection by Autoruns (https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/). Subkeys will be deleted after they run, thus (RunOnce). The RunOnceEx key will remain.",
      "platform": "windows"
    },
    "smbv1_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\SMB1\u0027 AND data!=0;",
      "interval": 3600,
      "description": "",
      "platform": "windows"
    },
    "smbv1_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\SMB1\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "send_error_alert_registry_exists": {
      "query": "SELECT * FROM registry WHERE key=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\SendAlert\u0027;",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn\u0027t by default",
      "platform": "windows"
    },
    "subscription_manager_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\EventForwarding\\SubscriptionManager\\1\u0027 AND (data!=\u0027Server=http://subdomain.domain.com:5985/wsman/SubscriptionManager/WEC\u0027 AND data!=\u0027Server=http://subdomain.domain.com:5985/wsman/SubscriptionManager/WEC\u0027);",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "subscription_manager_registry_missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\EventForwarding\\SubscriptionManager\\1\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "winrm_settings_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE (path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowBasic\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowCredSSP\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowUnencryptedTraffic\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowDigest\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowBasic\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowCredSSP\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowUnencryptedTraffic\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\WinRS\\AllowRemoteShellAccess\u0027) AND data!=0; ",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    }
  }
}
