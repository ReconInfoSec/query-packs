{
  "platform": "windows",
  "queries": {
    "Bitlocker_Encryption_Settings_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE (path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\ShouldEncryptOSDrive\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\OSDriveProtector\u0027) AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Bitlocker_MBAM_Endpoint_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\KeyRecoveryServiceEndPoint\u0027 AND data!=\u0027https://mbam.server.com/MBAMRecoveryAndHardwareService/CoreService.svc\u0027;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Bitlocker_MBAM_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\FVE\\MDOPBitLockerManagement\\UseMBAMServices\u0027 AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Command_Line_Auditing_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\\ProcessCreationIncludeCmdLine_Enabled\u0027 AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Command_Line_Auditing_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\\ProcessCreationIncludeCmdLine_Enabled\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Crash_Dump_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\CrashDumpEnabled\u0027 AND data=0;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Crash_Dump_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\CrashDumpEnabled\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "DNS_Plugin_DLL_Registry_Exists": {
      "query": "SELECT * FROM registry WHERE key=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\DNS\\Parameters\\ServerLevelPluginDll\u0027;",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn\u0027t by default",
      "platform": "windows"
    },
    "Dr_Watson_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry where key=\u0027HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug\u0027) WHERE key_exists!=2;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Error_Display_UI_Registry_Exists": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Microsoft\\PCHealth\\ErrorReporting\\ShowUI\u0027;",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn't by default",
      "platform": "windows"
    },
    "Error_Mode_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Windows\\ErrorMode\u0027 AND data=2;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Error_Mode_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Windows\\ErrorMode\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Log_Errors_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\LogEvent\u0027 AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Log_Errors_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\LogEvent\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Per_User_TS_Session_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\fSingleSessionPerUser\u0027 AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Per_User_TS_Session_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\fSingleSessionPerUser\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Powershell_InvocationHeader_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableInvocationHeader\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Powershell_Logging_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE (path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ModuleLogging\\EnableModuleLogging\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ScriptBlockLogging\\EnableScriptBlockLogging\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableTranscripting\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableInvocationHeader\u0027) AND data!=1;",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Powershell_ModuleLogging_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ModuleLogging\\EnableModuleLogging\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Powershell_ScriptBlockLogging_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\ScriptBlockLogging\\EnableScriptBlockLogging\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Powershell_TranscriptingLogging_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Powershell\\Transcription\\EnableTranscripting\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "SMBv1_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\SMB1\u0027 AND data!=0;",
      "interval": 3600,
      "description": "",
      "platform": "windows"
    },
    "SMBv1_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\SMB1\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "Send_Error_Alert_Registry_Exists": {
      "query": "SELECT * FROM registry WHERE key=\u0027HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\CrashControl\\SendAlert\u0027;",
      "interval": 3600,
      "description": "Returns the content of this key if it exists, which it shouldn\u0027t by default",
      "platform": "windows"
    },
    "Subscription_Manager_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\EventForwarding\\SubscriptionManager\\1\u0027 AND (data!=\u0027Server=http://subdomain.domain.com:5985/wsman/SubscriptionManager/WEC\u0027 AND data!=\u0027Server=http://subdomain.domain.com:5985/wsman/SubscriptionManager/WEC\u0027);",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    },
    "Subscription_Manager_Registry_Missing": {
      "query": "SELECT IFNULL(key_count,0) AS key_exists FROM (SELECT COUNT(*) AS key_count FROM registry WHERE path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\EventLog\\EventForwarding\\SubscriptionManager\\1\u0027) WHERE key_exists!=1;",
      "interval": 3600,
      "description": "Returns 0 as a result if the registry key does not exist",
      "platform": "windows"
    },
    "WinRM_Settings_Registry_Misconfigured": {
      "query": "SELECT * FROM registry WHERE (path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowBasic\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowCredSSP\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowUnencryptedTraffic\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Client\\AllowDigest\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowBasic\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowCredSSP\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\AllowUnencryptedTraffic\u0027 OR path=\u0027HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\WinRS\\AllowRemoteShellAccess\u0027) AND data!=0; ",
      "interval": 3600,
      "description": "Returns the content of the key if it does not match the expected value",
      "platform": "windows"
    }
  }
}
